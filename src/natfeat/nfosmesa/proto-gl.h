/* Generated by proto-gen.pl from /usr/local/include/GL/gl.h */

	 void  nfglClearIndex(GLfloat c );
	 void  nfglClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  nfglClear(GLbitfield mask );
	 void  nfglIndexMask(GLuint mask );
	 void  nfglColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
	 void  nfglAlphaFunc(GLenum func, GLclampf ref );
	 void  nfglBlendFunc(GLenum sfactor, GLenum dfactor );
	 void  nfglLogicOp(GLenum opcode );
	 void  nfglCullFace(GLenum mode );
	 void  nfglFrontFace(GLenum mode );
	 void  nfglPointSize(GLfloat size );
	 void  nfglLineWidth(GLfloat width );
	 void  nfglLineStipple(GLint factor, GLushort pattern );
	 void  nfglPolygonMode(GLenum face, GLenum mode );
	 void  nfglPolygonOffset(GLfloat factor, GLfloat units );
	 void  nfglPolygonStipple(const GLubyte *mask );
	 void  nfglGetPolygonStipple(GLubyte *mask );
	 void  nfglEdgeFlag(GLboolean flag );
	 void  nfglEdgeFlagv(const GLboolean *flag );
	 void  nfglScissor(GLint x, GLint y, GLsizei width, GLsizei height);
	 void  nfglClipPlane(GLenum plane, const GLdouble *equation );
	 void  nfglGetClipPlane(GLenum plane, GLdouble *equation );
	 void  nfglDrawBuffer(GLenum mode );
	 void  nfglReadBuffer(GLenum mode );
	 void  nfglEnable(GLenum cap );
	 void  nfglDisable(GLenum cap );
	 GLboolean  nfglIsEnabled(GLenum cap );
	 void  nfglEnableClientState(GLenum cap );
	 void  nfglDisableClientState(GLenum cap );
	 void  nfglGetBooleanv(GLenum pname, GLboolean *params );
	 void  nfglGetDoublev(GLenum pname, GLdouble *params );
	 void  nfglGetFloatv(GLenum pname, GLfloat *params );
	 void  nfglGetIntegerv(GLenum pname, GLint *params );
	 void  nfglPushAttrib(GLbitfield mask );
	 void  nfglPopAttrib(void);
	 void  nfglPushClientAttrib(GLbitfield mask );
	 void  nfglPopClientAttrib(void);
	 GLint  nfglRenderMode(GLenum mode );
	 GLenum  nfglGetError(void);
	 const GLubyte*  nfglGetString(GLenum name );
	 void  nfglFinish(void);
	 void  nfglFlush(void);
	 void  nfglHint(GLenum target, GLenum mode );
	 void  nfglClearDepth(GLclampd depth );
	 void  nfglDepthFunc(GLenum func );
	 void  nfglDepthMask(GLboolean flag );
	 void  nfglDepthRange(GLclampd near_val, GLclampd far_val );
	 void  nfglClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  nfglAccum(GLenum op, GLfloat value );
	 void  nfglMatrixMode(GLenum mode );
	 void  nfglOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  nfglFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  nfglViewport(GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglPushMatrix(void);
	 void  nfglPopMatrix(void);
	 void  nfglLoadIdentity(void);
	 void  nfglLoadMatrixd(const GLdouble *m );
	 void  nfglLoadMatrixf(const GLfloat *m );
	 void  nfglMultMatrixd(const GLdouble *m );
	 void  nfglMultMatrixf(const GLfloat *m );
	 void  nfglRotated(GLdouble annfgle, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglRotatef(GLfloat annfgle, GLfloat x, GLfloat y, GLfloat z );
	 void  nfglScaled(GLdouble x, GLdouble y, GLdouble z );
	 void  nfglScalef(GLfloat x, GLfloat y, GLfloat z );
	 void  nfglTranslated(GLdouble x, GLdouble y, GLdouble z );
	 void  nfglTranslatef(GLfloat x, GLfloat y, GLfloat z );
	 GLboolean  nfglIsList(GLuint list );
	 void  nfglDeleteLists(GLuint list, GLsizei range );
	 GLuint  nfglGenLists(GLsizei range );
	 void  nfglNewList(GLuint list, GLenum mode );
	 void  nfglEndList(void);
	 void  nfglCallList(GLuint list );
	 void  nfglCallLists(GLsizei n, GLenum type, const GLvoid *lists );
	 void  nfglListBase(GLuint base );
	 void  nfglBegin(GLenum mode );
	 void  nfglEnd(void);
	 void  nfglVertex2d(GLdouble x, GLdouble y );
	 void  nfglVertex2f(GLfloat x, GLfloat y );
	 void  nfglVertex2i(GLint x, GLint y );
	 void  nfglVertex2s(GLshort x, GLshort y );
	 void  nfglVertex3d(GLdouble x, GLdouble y, GLdouble z );
	 void  nfglVertex3f(GLfloat x, GLfloat y, GLfloat z );
	 void  nfglVertex3i(GLint x, GLint y, GLint z );
	 void  nfglVertex3s(GLshort x, GLshort y, GLshort z );
	 void  nfglVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  nfglVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  nfglVertex4i(GLint x, GLint y, GLint z, GLint w );
	 void  nfglVertex4s(GLshort x, GLshort y, GLshort z, GLshort w );
	 void  nfglVertex2dv(const GLdouble *v );
	 void  nfglVertex2fv(const GLfloat *v );
	 void  nfglVertex2iv(const GLint *v );
	 void  nfglVertex2sv(const GLshort *v );
	 void  nfglVertex3dv(const GLdouble *v );
	 void  nfglVertex3fv(const GLfloat *v );
	 void  nfglVertex3iv(const GLint *v );
	 void  nfglVertex3sv(const GLshort *v );
	 void  nfglVertex4dv(const GLdouble *v );
	 void  nfglVertex4fv(const GLfloat *v );
	 void  nfglVertex4iv(const GLint *v );
	 void  nfglVertex4sv(const GLshort *v );
	 void  nfglNormal3b(GLbyte nx, GLbyte ny, GLbyte nz );
	 void  nfglNormal3d(GLdouble nx, GLdouble ny, GLdouble nz );
	 void  nfglNormal3f(GLfloat nx, GLfloat ny, GLfloat nz );
	 void  nfglNormal3i(GLint nx, GLint ny, GLint nz );
	 void  nfglNormal3s(GLshort nx, GLshort ny, GLshort nz );
	 void  nfglNormal3bv(const GLbyte *v );
	 void  nfglNormal3dv(const GLdouble *v );
	 void  nfglNormal3fv(const GLfloat *v );
	 void  nfglNormal3iv(const GLint *v );
	 void  nfglNormal3sv(const GLshort *v );
	 void  nfglIndexd(GLdouble c );
	 void  nfglIndexf(GLfloat c );
	 void  nfglIndexi(GLint c );
	 void  nfglIndexs(GLshort c );
	 void  nfglIndexub(GLubyte c );
	 void  nfglIndexdv(const GLdouble *c );
	 void  nfglIndexfv(const GLfloat *c );
	 void  nfglIndexiv(const GLint *c );
	 void  nfglIndexsv(const GLshort *c );
	 void  nfglIndexubv(const GLubyte *c );
	 void  nfglColor3b(GLbyte red, GLbyte green, GLbyte blue );
	 void  nfglColor3d(GLdouble red, GLdouble green, GLdouble blue );
	 void  nfglColor3f(GLfloat red, GLfloat green, GLfloat blue );
	 void  nfglColor3i(GLint red, GLint green, GLint blue );
	 void  nfglColor3s(GLshort red, GLshort green, GLshort blue );
	 void  nfglColor3ub(GLubyte red, GLubyte green, GLubyte blue );
	 void  nfglColor3ui(GLuint red, GLuint green, GLuint blue );
	 void  nfglColor3us(GLushort red, GLushort green, GLushort blue );
	 void  nfglColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
	 void  nfglColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
	 void  nfglColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  nfglColor4i(GLint red, GLint green, GLint blue, GLint alpha );
	 void  nfglColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha );
	 void  nfglColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
	 void  nfglColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha );
	 void  nfglColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha );
	 void  nfglColor3bv(const GLbyte *v );
	 void  nfglColor3dv(const GLdouble *v );
	 void  nfglColor3fv(const GLfloat *v );
	 void  nfglColor3iv(const GLint *v );
	 void  nfglColor3sv(const GLshort *v );
	 void  nfglColor3ubv(const GLubyte *v );
	 void  nfglColor3uiv(const GLuint *v );
	 void  nfglColor3usv(const GLushort *v );
	 void  nfglColor4bv(const GLbyte *v );
	 void  nfglColor4dv(const GLdouble *v );
	 void  nfglColor4fv(const GLfloat *v );
	 void  nfglColor4iv(const GLint *v );
	 void  nfglColor4sv(const GLshort *v );
	 void  nfglColor4ubv(const GLubyte *v );
	 void  nfglColor4uiv(const GLuint *v );
	 void  nfglColor4usv(const GLushort *v );
	 void  nfglTexCoord1d(GLdouble s );
	 void  nfglTexCoord1f(GLfloat s );
	 void  nfglTexCoord1i(GLint s );
	 void  nfglTexCoord1s(GLshort s );
	 void  nfglTexCoord2d(GLdouble s, GLdouble t );
	 void  nfglTexCoord2f(GLfloat s, GLfloat t );
	 void  nfglTexCoord2i(GLint s, GLint t );
	 void  nfglTexCoord2s(GLshort s, GLshort t );
	 void  nfglTexCoord3d(GLdouble s, GLdouble t, GLdouble r );
	 void  nfglTexCoord3f(GLfloat s, GLfloat t, GLfloat r );
	 void  nfglTexCoord3i(GLint s, GLint t, GLint r );
	 void  nfglTexCoord3s(GLshort s, GLshort t, GLshort r );
	 void  nfglTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  nfglTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  nfglTexCoord4i(GLint s, GLint t, GLint r, GLint q );
	 void  nfglTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q );
	 void  nfglTexCoord1dv(const GLdouble *v );
	 void  nfglTexCoord1fv(const GLfloat *v );
	 void  nfglTexCoord1iv(const GLint *v );
	 void  nfglTexCoord1sv(const GLshort *v );
	 void  nfglTexCoord2dv(const GLdouble *v );
	 void  nfglTexCoord2fv(const GLfloat *v );
	 void  nfglTexCoord2iv(const GLint *v );
	 void  nfglTexCoord2sv(const GLshort *v );
	 void  nfglTexCoord3dv(const GLdouble *v );
	 void  nfglTexCoord3fv(const GLfloat *v );
	 void  nfglTexCoord3iv(const GLint *v );
	 void  nfglTexCoord3sv(const GLshort *v );
	 void  nfglTexCoord4dv(const GLdouble *v );
	 void  nfglTexCoord4fv(const GLfloat *v );
	 void  nfglTexCoord4iv(const GLint *v );
	 void  nfglTexCoord4sv(const GLshort *v );
	 void  nfglRasterPos2d(GLdouble x, GLdouble y );
	 void  nfglRasterPos2f(GLfloat x, GLfloat y );
	 void  nfglRasterPos2i(GLint x, GLint y );
	 void  nfglRasterPos2s(GLshort x, GLshort y );
	 void  nfglRasterPos3d(GLdouble x, GLdouble y, GLdouble z );
	 void  nfglRasterPos3f(GLfloat x, GLfloat y, GLfloat z );
	 void  nfglRasterPos3i(GLint x, GLint y, GLint z );
	 void  nfglRasterPos3s(GLshort x, GLshort y, GLshort z );
	 void  nfglRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  nfglRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  nfglRasterPos4i(GLint x, GLint y, GLint z, GLint w );
	 void  nfglRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w );
	 void  nfglRasterPos2dv(const GLdouble *v );
	 void  nfglRasterPos2fv(const GLfloat *v );
	 void  nfglRasterPos2iv(const GLint *v );
	 void  nfglRasterPos2sv(const GLshort *v );
	 void  nfglRasterPos3dv(const GLdouble *v );
	 void  nfglRasterPos3fv(const GLfloat *v );
	 void  nfglRasterPos3iv(const GLint *v );
	 void  nfglRasterPos3sv(const GLshort *v );
	 void  nfglRasterPos4dv(const GLdouble *v );
	 void  nfglRasterPos4fv(const GLfloat *v );
	 void  nfglRasterPos4iv(const GLint *v );
	 void  nfglRasterPos4sv(const GLshort *v );
	 void  nfglRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
	 void  nfglRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
	 void  nfglRecti(GLint x1, GLint y1, GLint x2, GLint y2 );
	 void  nfglRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
	 void  nfglRectdv(const GLdouble *v1, const GLdouble *v2 );
	 void  nfglRectfv(const GLfloat *v1, const GLfloat *v2 );
	 void  nfglRectiv(const GLint *v1, const GLint *v2 );
	 void  nfglRectsv(const GLshort *v1, const GLshort *v2 );
	 void  nfglVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglEdgeFlagPointer(GLsizei stride, const GLvoid *ptr );
	 void  nfglGetPointerv(GLenum pname, GLvoid **params );
	 void  nfglArrayElement(GLint i );
	 void  nfglDrawArrays(GLenum mode, GLint first, GLsizei count );
	 void  nfglDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
	 void  nfglInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer );
	 void  nfglShadeModel(GLenum mode );
	 void  nfglLightf(GLenum light, GLenum pname, GLfloat param );
	 void  nfglLighti(GLenum light, GLenum pname, GLint param );
	 void  nfglLightfv(GLenum light, GLenum pname, const GLfloat *params );
	 void  nfglLightiv(GLenum light, GLenum pname, const GLint *params );
	 void  nfglGetLightfv(GLenum light, GLenum pname, GLfloat *params );
	 void  nfglGetLightiv(GLenum light, GLenum pname, GLint *params );
	 void  nfglLightModelf(GLenum pname, GLfloat param );
	 void  nfglLightModeli(GLenum pname, GLint param );
	 void  nfglLightModelfv(GLenum pname, const GLfloat *params );
	 void  nfglLightModeliv(GLenum pname, const GLint *params );
	 void  nfglMaterialf(GLenum face, GLenum pname, GLfloat param );
	 void  nfglMateriali(GLenum face, GLenum pname, GLint param );
	 void  nfglMaterialfv(GLenum face, GLenum pname, const GLfloat *params );
	 void  nfglMaterialiv(GLenum face, GLenum pname, const GLint *params );
	 void  nfglGetMaterialfv(GLenum face, GLenum pname, GLfloat *params );
	 void  nfglGetMaterialiv(GLenum face, GLenum pname, GLint *params );
	 void  nfglColorMaterial(GLenum face, GLenum mode );
	 void  nfglPixelZoom(GLfloat xfactor, GLfloat yfactor );
	 void  nfglPixelStoref(GLenum pname, GLfloat param );
	 void  nfglPixelStorei(GLenum pname, GLint param );
	 void  nfglPixelTransferf(GLenum pname, GLfloat param );
	 void  nfglPixelTransferi(GLenum pname, GLint param );
	 void  nfglPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values );
	 void  nfglPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values );
	 void  nfglPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values );
	 void  nfglGetPixelMapfv(GLenum map, GLfloat *values );
	 void  nfglGetPixelMapuiv(GLenum map, GLuint *values );
	 void  nfglGetPixelMapusv(GLenum map, GLushort *values );
	 void  nfglBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
	 void  nfglReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
	 void  nfglDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
	 void  nfglStencilFunc(GLenum func, GLint ref, GLuint mask );
	 void  nfglStencilMask(GLuint mask );
	 void  nfglStencilOp(GLenum fail, GLenum zfail, GLenum zpass );
	 void  nfglClearStencil(GLint s );
	 void  nfglTexGend(GLenum coord, GLenum pname, GLdouble param );
	 void  nfglTexGenf(GLenum coord, GLenum pname, GLfloat param );
	 void  nfglTexGeni(GLenum coord, GLenum pname, GLint param );
	 void  nfglTexGendv(GLenum coord, GLenum pname, const GLdouble *params );
	 void  nfglTexGenfv(GLenum coord, GLenum pname, const GLfloat *params );
	 void  nfglTexGeniv(GLenum coord, GLenum pname, const GLint *params );
	 void  nfglGetTexGendv(GLenum coord, GLenum pname, GLdouble *params );
	 void  nfglGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params );
	 void  nfglGetTexGeniv(GLenum coord, GLenum pname, GLint *params );
	 void  nfglTexEnvf(GLenum target, GLenum pname, GLfloat param );
	 void  nfglTexEnvi(GLenum target, GLenum pname, GLint param );
	 void  nfglTexEnvfv(GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglTexEnviv(GLenum target, GLenum pname, const GLint *params );
	 void  nfglGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetTexEnviv(GLenum target, GLenum pname, GLint *params );
	 void  nfglTexParameterf(GLenum target, GLenum pname, GLfloat param );
	 void  nfglTexParameteri(GLenum target, GLenum pname, GLint param );
	 void  nfglTexParameterfv(GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglTexParameteriv(GLenum target, GLenum pname, const GLint *params );
	 void  nfglGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
	 void  nfglGetTexParameteriv(GLenum target, GLenum pname, GLint *params );
	 void  nfglGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params );
	 void  nfglGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params );
	 void  nfglTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
	 void  nfglGenTextures(GLsizei n, GLuint *textures );
	 void  nfglDeleteTextures(GLsizei n, const GLuint *textures);
	 void  nfglBindTexture(GLenum target, GLuint texture );
	 void  nfglPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities );
	 GLboolean  nfglAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences );
	 GLboolean  nfglIsTexture(GLuint texture );
	 void  nfglTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
	 void  nfglCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
	 void  nfglCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
	 void  nfglCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
	 void  nfglMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
	 void  nfglMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
	 void  nfglMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
	 void  nfglGetMapdv(GLenum target, GLenum query, GLdouble *v );
	 void  nfglGetMapfv(GLenum target, GLenum query, GLfloat *v );
	 void  nfglGetMapiv(GLenum target, GLenum query, GLint *v );
	 void  nfglEvalCoord1d(GLdouble u );
	 void  nfglEvalCoord1f(GLfloat u );
	 void  nfglEvalCoord1dv(const GLdouble *u );
	 void  nfglEvalCoord1fv(const GLfloat *u );
	 void  nfglEvalCoord2d(GLdouble u, GLdouble v );
	 void  nfglEvalCoord2f(GLfloat u, GLfloat v );
	 void  nfglEvalCoord2dv(const GLdouble *u );
	 void  nfglEvalCoord2fv(const GLfloat *u );
	 void  nfglMapGrid1d(GLint un, GLdouble u1, GLdouble u2 );
	 void  nfglMapGrid1f(GLint un, GLfloat u1, GLfloat u2 );
	 void  nfglMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
	 void  nfglMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
	 void  nfglEvalPoint1(GLint i );
	 void  nfglEvalPoint2(GLint i, GLint j );
	 void  nfglEvalMesh1(GLenum mode, GLint i1, GLint i2 );
	 void  nfglEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
	 void  nfglFogf(GLenum pname, GLfloat param );
	 void  nfglFogi(GLenum pname, GLint param );
	 void  nfglFogfv(GLenum pname, const GLfloat *params );
	 void  nfglFogiv(GLenum pname, const GLint *params );
	 void  nfglFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer );
	 void  nfglPassThrough(GLfloat token );
	 void  nfglSelectBuffer(GLsizei size, GLuint *buffer );
	 void  nfglInitNames(void);
	 void  nfglLoadName(GLuint name );
	 void  nfglPushName(GLuint name );
	 void  nfglPopName(void);
/*
	 void  nfglDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
	 void  nfglTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	 void  nfglCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
	 void  nfglColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data );
	 void  nfglColorTableParameteriv(void,GLenum target, GLenum pname, const GLint *params);
	 void  nfglColorTableParameterfv(void,GLenum target, GLenum pname, const GLfloat *params);
	 void  nfglCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
	 void  nfglCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  nfglGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table );
	 void  nfglGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params );
	 void  nfglBlendEquation(GLenum mode );
	 void  nfglBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  nfglHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
	 void  nfglResetHistogram(GLenum target );
	 void  nfglGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
	 void  nfglGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params );
	 void  nfglMinmax(GLenum target, GLenum internalformat, GLboolean sink );
	 void  nfglResetMinmax(GLenum target );
	 void  nfglGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
	 void  nfglGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params );
	 void  nfglConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image );
	 void  nfglConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image );
	 void  nfglConvolutionParameterf(GLenum target, GLenum pname, GLfloat params );
	 void  nfglConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglConvolutionParameteri(GLenum target, GLenum pname, GLint params );
	 void  nfglConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params );
	 void  nfglCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  nfglCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	 void  nfglGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image );
	 void  nfglGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params );
	 void  nfglSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column );
	 void  nfglGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
	 void  nfglActiveTexture(GLenum texture );
	 void  nfglClientActiveTexture(GLenum texture );
	 void  nfglCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img );
	 void  nfglMultiTexCoord1d(GLenum target, GLdouble s );
	 void  nfglMultiTexCoord1dv(GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord1f(GLenum target, GLfloat s );
	 void  nfglMultiTexCoord1fv(GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord1i(GLenum target, GLint s );
	 void  nfglMultiTexCoord1iv(GLenum target, const GLint *v );
	 void  nfglMultiTexCoord1s(GLenum target, GLshort s );
	 void  nfglMultiTexCoord1sv(GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t );
	 void  nfglMultiTexCoord2dv(GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t );
	 void  nfglMultiTexCoord2fv(GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord2i(GLenum target, GLint s, GLint t );
	 void  nfglMultiTexCoord2iv(GLenum target, const GLint *v );
	 void  nfglMultiTexCoord2s(GLenum target, GLshort s, GLshort t );
	 void  nfglMultiTexCoord2sv(GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r );
	 void  nfglMultiTexCoord3dv(GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r );
	 void  nfglMultiTexCoord3fv(GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r );
	 void  nfglMultiTexCoord3iv(GLenum target, const GLint *v );
	 void  nfglMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r );
	 void  nfglMultiTexCoord3sv(GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  nfglMultiTexCoord4dv(GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  nfglMultiTexCoord4fv(GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q );
	 void  nfglMultiTexCoord4iv(GLenum target, const GLint *v );
	 void  nfglMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
	 void  nfglMultiTexCoord4sv(GLenum target, const GLshort *v );
	 void  nfglLoadTransposeMatrixd(const GLdouble m[16] );
	 void  nfglLoadTransposeMatrixf(const GLfloat m[16] );
	 void  nfglMultTransposeMatrixd(const GLdouble m[16] );
	 void  nfglMultTransposeMatrixf(const GLfloat m[16] );
	 void  nfglSampleCoverage(GLclampf value, GLboolean invert );
	 void  nfglActiveTextureARB(void,GLenum texture);
	 void  nfglClientActiveTextureARB(void,GLenum texture);
	 void  nfglMultiTexCoord1dARB(void,GLenum target, GLdouble s);
	 void  nfglMultiTexCoord1dvARB(void,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord1fARB(void,GLenum target, GLfloat s);
	 void  nfglMultiTexCoord1fvARB(void,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord1iARB(void,GLenum target, GLint s);
	 void  nfglMultiTexCoord1ivARB(void,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord1sARB(void,GLenum target, GLshort s);
	 void  nfglMultiTexCoord1svARB(void,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord2dARB(void,GLenum target, GLdouble s, GLdouble t);
	 void  nfglMultiTexCoord2dvARB(void,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord2fARB(void,GLenum target, GLfloat s, GLfloat t);
	 void  nfglMultiTexCoord2fvARB(void,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord2iARB(void,GLenum target, GLint s, GLint t);
	 void  nfglMultiTexCoord2ivARB(void,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord2sARB(void,GLenum target, GLshort s, GLshort t);
	 void  nfglMultiTexCoord2svARB(void,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord3dARB(void,GLenum target, GLdouble s, GLdouble t, GLdouble r);
	 void  nfglMultiTexCoord3dvARB(void,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord3fARB(void,GLenum target, GLfloat s, GLfloat t, GLfloat r);
	 void  nfglMultiTexCoord3fvARB(void,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord3iARB(void,GLenum target, GLint s, GLint t, GLint r);
	 void  nfglMultiTexCoord3ivARB(void,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord3sARB(void,GLenum target, GLshort s, GLshort t, GLshort r);
	 void  nfglMultiTexCoord3svARB(void,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord4dARB(void,GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	 void  nfglMultiTexCoord4dvARB(void,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord4fARB(void,GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	 void  nfglMultiTexCoord4fvARB(void,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord4iARB(void,GLenum target, GLint s, GLint t, GLint r, GLint q);
	 void  nfglMultiTexCoord4ivARB(void,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord4sARB(void,GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	 void  nfglMultiTexCoord4svARB(void,GLenum target, const GLshort *v);
*/
	 void  nfglEnableTraceMESA(GLbitfield mask );
	 void  nfglDisableTraceMESA(GLbitfield mask );
	 void  nfglNewTraceMESA(GLbitfield mask, const GLubyte * traceName );
	 void  nfglEndTraceMESA(void);
	 void  nfglTraceAssertAttribMESA(GLbitfield attribMask );
	 void  nfglTraceCommentMESA(const GLubyte * comment );
	 void  nfglTraceTextureMESA(GLuint name, const GLubyte* comment );
	 void  nfglTraceListMESA(GLuint name, const GLubyte* comment );
	 void  nfglTracePointerMESA(GLvoid* pointer, const GLubyte* comment );
	 void  nfglTracePointerRangeMESA(const GLvoid* first, const GLvoid* last, const GLubyte* comment );
	 void  nfglBlendEquationSeparateATI(GLenum modeRGB, GLenum modeA );

/* Functions generated: 465 */
