/* Generated by dyngl_h.pl from mesa/include/GL/gl.h */

	void (STDCALL *ClearIndex)( GLfloat c );
	void (STDCALL *ClearColor)( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	void (STDCALL *Clear)( GLbitfield mask );
	void (STDCALL *IndexMask)( GLuint mask );
	void (STDCALL *ColorMask)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
	void (STDCALL *AlphaFunc)( GLenum func, GLclampf ref );
	void (STDCALL *BlendFunc)( GLenum sfactor, GLenum dfactor );
	void (STDCALL *LogicOp)( GLenum opcode );
	void (STDCALL *CullFace)( GLenum mode );
	void (STDCALL *FrontFace)( GLenum mode );
	void (STDCALL *PointSize)( GLfloat size );
	void (STDCALL *LineWidth)( GLfloat width );
	void (STDCALL *LineStipple)( GLint factor, GLushort pattern );
	void (STDCALL *PolygonMode)( GLenum face, GLenum mode );
	void (STDCALL *PolygonOffset)( GLfloat factor, GLfloat units );
	void (STDCALL *PolygonStipple)( const GLubyte *mask );
	void (STDCALL *GetPolygonStipple)( GLubyte *mask );
	void (STDCALL *EdgeFlag)( GLboolean flag );
	void (STDCALL *EdgeFlagv)( const GLboolean *flag );
	void (STDCALL *Scissor)( GLint x, GLint y, GLsizei width, GLsizei height);
	void (STDCALL *ClipPlane)( GLenum plane, const GLdouble *equation );
	void (STDCALL *GetClipPlane)( GLenum plane, GLdouble *equation );
	void (STDCALL *DrawBuffer)( GLenum mode );
	void (STDCALL *ReadBuffer)( GLenum mode );
	void (STDCALL *Enable)( GLenum cap );
	void (STDCALL *Disable)( GLenum cap );
	GLboolean (STDCALL *IsEnabled)( GLenum cap );
	void (STDCALL *EnableClientState)( GLenum cap ); /* 1.1 */
	void (STDCALL *DisableClientState)( GLenum cap ); /* 1.1 */
	void (STDCALL *GetBooleanv)( GLenum pname, GLboolean *params );
	void (STDCALL *GetDoublev)( GLenum pname, GLdouble *params );
	void (STDCALL *GetFloatv)( GLenum pname, GLfloat *params );
	void (STDCALL *GetIntegerv)( GLenum pname, GLint *params );
	void (STDCALL *PushAttrib)( GLbitfield mask );
	void (STDCALL *PopAttrib)( void );
	void (STDCALL *PushClientAttrib)( GLbitfield mask ); /* 1.1 */
	void (STDCALL *PopClientAttrib)( void ); /* 1.1 */
	GLint (STDCALL *RenderMode)( GLenum mode );
	GLenum (STDCALL *GetError)( void );
	const GLubyte * (STDCALL *GetString)( GLenum name );
	void (STDCALL *Finish)( void );
	void (STDCALL *Flush)( void );
	void (STDCALL *Hint)( GLenum target, GLenum mode );
	void (STDCALL *ClearDepth)( GLclampd depth );
	void (STDCALL *DepthFunc)( GLenum func );
	void (STDCALL *DepthMask)( GLboolean flag );
	void (STDCALL *DepthRange)( GLclampd near_val, GLclampd far_val );
	void (STDCALL *ClearAccum)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	void (STDCALL *Accum)( GLenum op, GLfloat value );
	void (STDCALL *MatrixMode)( GLenum mode );
	void (STDCALL *Ortho)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	void (STDCALL *Frustum)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	void (STDCALL *Viewport)( GLint x, GLint y, GLsizei width, GLsizei height );
	void (STDCALL *PushMatrix)( void );
	void (STDCALL *PopMatrix)( void );
	void (STDCALL *LoadIdentity)( void );
	void (STDCALL *LoadMatrixd)( const GLdouble *m );
	void (STDCALL *LoadMatrixf)( const GLfloat *m );
	void (STDCALL *MultMatrixd)( const GLdouble *m );
	void (STDCALL *MultMatrixf)( const GLfloat *m );
	void (STDCALL *Rotated)( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
	void (STDCALL *Rotatef)( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
	void (STDCALL *Scaled)( GLdouble x, GLdouble y, GLdouble z );
	void (STDCALL *Scalef)( GLfloat x, GLfloat y, GLfloat z );
	void (STDCALL *Translated)( GLdouble x, GLdouble y, GLdouble z );
	void (STDCALL *Translatef)( GLfloat x, GLfloat y, GLfloat z );
	GLboolean (STDCALL *IsList)( GLuint list );
	void (STDCALL *DeleteLists)( GLuint list, GLsizei range );
	GLuint (STDCALL *GenLists)( GLsizei range );
	void (STDCALL *NewList)( GLuint list, GLenum mode );
	void (STDCALL *EndList)( void );
	void (STDCALL *CallList)( GLuint list );
	void (STDCALL *CallLists)( GLsizei n, GLenum type, const GLvoid *lists );
	void (STDCALL *ListBase)( GLuint base );
	void (STDCALL *Begin)( GLenum mode );
	void (STDCALL *End)( void );
	void (STDCALL *Vertex2d)( GLdouble x, GLdouble y );
	void (STDCALL *Vertex2f)( GLfloat x, GLfloat y );
	void (STDCALL *Vertex2i)( GLint x, GLint y );
	void (STDCALL *Vertex2s)( GLshort x, GLshort y );
	void (STDCALL *Vertex3d)( GLdouble x, GLdouble y, GLdouble z );
	void (STDCALL *Vertex3f)( GLfloat x, GLfloat y, GLfloat z );
	void (STDCALL *Vertex3i)( GLint x, GLint y, GLint z );
	void (STDCALL *Vertex3s)( GLshort x, GLshort y, GLshort z );
	void (STDCALL *Vertex4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	void (STDCALL *Vertex4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	void (STDCALL *Vertex4i)( GLint x, GLint y, GLint z, GLint w );
	void (STDCALL *Vertex4s)( GLshort x, GLshort y, GLshort z, GLshort w );
	void (STDCALL *Vertex2dv)( const GLdouble *v );
	void (STDCALL *Vertex2fv)( const GLfloat *v );
	void (STDCALL *Vertex2iv)( const GLint *v );
	void (STDCALL *Vertex2sv)( const GLshort *v );
	void (STDCALL *Vertex3dv)( const GLdouble *v );
	void (STDCALL *Vertex3fv)( const GLfloat *v );
	void (STDCALL *Vertex3iv)( const GLint *v );
	void (STDCALL *Vertex3sv)( const GLshort *v );
	void (STDCALL *Vertex4dv)( const GLdouble *v );
	void (STDCALL *Vertex4fv)( const GLfloat *v );
	void (STDCALL *Vertex4iv)( const GLint *v );
	void (STDCALL *Vertex4sv)( const GLshort *v );
	void (STDCALL *Normal3b)( GLbyte nx, GLbyte ny, GLbyte nz );
	void (STDCALL *Normal3d)( GLdouble nx, GLdouble ny, GLdouble nz );
	void (STDCALL *Normal3f)( GLfloat nx, GLfloat ny, GLfloat nz );
	void (STDCALL *Normal3i)( GLint nx, GLint ny, GLint nz );
	void (STDCALL *Normal3s)( GLshort nx, GLshort ny, GLshort nz );
	void (STDCALL *Normal3bv)( const GLbyte *v );
	void (STDCALL *Normal3dv)( const GLdouble *v );
	void (STDCALL *Normal3fv)( const GLfloat *v );
	void (STDCALL *Normal3iv)( const GLint *v );
	void (STDCALL *Normal3sv)( const GLshort *v );
	void (STDCALL *Indexd)( GLdouble c );
	void (STDCALL *Indexf)( GLfloat c );
	void (STDCALL *Indexi)( GLint c );
	void (STDCALL *Indexs)( GLshort c );
	void (STDCALL *Indexub)( GLubyte c ); /* 1.1 */
	void (STDCALL *Indexdv)( const GLdouble *c );
	void (STDCALL *Indexfv)( const GLfloat *c );
	void (STDCALL *Indexiv)( const GLint *c );
	void (STDCALL *Indexsv)( const GLshort *c );
	void (STDCALL *Indexubv)( const GLubyte *c ); /* 1.1 */
	void (STDCALL *Color3b)( GLbyte red, GLbyte green, GLbyte blue );
	void (STDCALL *Color3d)( GLdouble red, GLdouble green, GLdouble blue );
	void (STDCALL *Color3f)( GLfloat red, GLfloat green, GLfloat blue );
	void (STDCALL *Color3i)( GLint red, GLint green, GLint blue );
	void (STDCALL *Color3s)( GLshort red, GLshort green, GLshort blue );
	void (STDCALL *Color3ub)( GLubyte red, GLubyte green, GLubyte blue );
	void (STDCALL *Color3ui)( GLuint red, GLuint green, GLuint blue );
	void (STDCALL *Color3us)( GLushort red, GLushort green, GLushort blue );
	void (STDCALL *Color4b)( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
	void (STDCALL *Color4d)( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
	void (STDCALL *Color4f)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	void (STDCALL *Color4i)( GLint red, GLint green, GLint blue, GLint alpha );
	void (STDCALL *Color4s)( GLshort red, GLshort green, GLshort blue, GLshort alpha );
	void (STDCALL *Color4ub)( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
	void (STDCALL *Color4ui)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
	void (STDCALL *Color4us)( GLushort red, GLushort green, GLushort blue, GLushort alpha );
	void (STDCALL *Color3bv)( const GLbyte *v );
	void (STDCALL *Color3dv)( const GLdouble *v );
	void (STDCALL *Color3fv)( const GLfloat *v );
	void (STDCALL *Color3iv)( const GLint *v );
	void (STDCALL *Color3sv)( const GLshort *v );
	void (STDCALL *Color3ubv)( const GLubyte *v );
	void (STDCALL *Color3uiv)( const GLuint *v );
	void (STDCALL *Color3usv)( const GLushort *v );
	void (STDCALL *Color4bv)( const GLbyte *v );
	void (STDCALL *Color4dv)( const GLdouble *v );
	void (STDCALL *Color4fv)( const GLfloat *v );
	void (STDCALL *Color4iv)( const GLint *v );
	void (STDCALL *Color4sv)( const GLshort *v );
	void (STDCALL *Color4ubv)( const GLubyte *v );
	void (STDCALL *Color4uiv)( const GLuint *v );
	void (STDCALL *Color4usv)( const GLushort *v );
	void (STDCALL *TexCoord1d)( GLdouble s );
	void (STDCALL *TexCoord1f)( GLfloat s );
	void (STDCALL *TexCoord1i)( GLint s );
	void (STDCALL *TexCoord1s)( GLshort s );
	void (STDCALL *TexCoord2d)( GLdouble s, GLdouble t );
	void (STDCALL *TexCoord2f)( GLfloat s, GLfloat t );
	void (STDCALL *TexCoord2i)( GLint s, GLint t );
	void (STDCALL *TexCoord2s)( GLshort s, GLshort t );
	void (STDCALL *TexCoord3d)( GLdouble s, GLdouble t, GLdouble r );
	void (STDCALL *TexCoord3f)( GLfloat s, GLfloat t, GLfloat r );
	void (STDCALL *TexCoord3i)( GLint s, GLint t, GLint r );
	void (STDCALL *TexCoord3s)( GLshort s, GLshort t, GLshort r );
	void (STDCALL *TexCoord4d)( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	void (STDCALL *TexCoord4f)( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	void (STDCALL *TexCoord4i)( GLint s, GLint t, GLint r, GLint q );
	void (STDCALL *TexCoord4s)( GLshort s, GLshort t, GLshort r, GLshort q );
	void (STDCALL *TexCoord1dv)( const GLdouble *v );
	void (STDCALL *TexCoord1fv)( const GLfloat *v );
	void (STDCALL *TexCoord1iv)( const GLint *v );
	void (STDCALL *TexCoord1sv)( const GLshort *v );
	void (STDCALL *TexCoord2dv)( const GLdouble *v );
	void (STDCALL *TexCoord2fv)( const GLfloat *v );
	void (STDCALL *TexCoord2iv)( const GLint *v );
	void (STDCALL *TexCoord2sv)( const GLshort *v );
	void (STDCALL *TexCoord3dv)( const GLdouble *v );
	void (STDCALL *TexCoord3fv)( const GLfloat *v );
	void (STDCALL *TexCoord3iv)( const GLint *v );
	void (STDCALL *TexCoord3sv)( const GLshort *v );
	void (STDCALL *TexCoord4dv)( const GLdouble *v );
	void (STDCALL *TexCoord4fv)( const GLfloat *v );
	void (STDCALL *TexCoord4iv)( const GLint *v );
	void (STDCALL *TexCoord4sv)( const GLshort *v );
	void (STDCALL *RasterPos2d)( GLdouble x, GLdouble y );
	void (STDCALL *RasterPos2f)( GLfloat x, GLfloat y );
	void (STDCALL *RasterPos2i)( GLint x, GLint y );
	void (STDCALL *RasterPos2s)( GLshort x, GLshort y );
	void (STDCALL *RasterPos3d)( GLdouble x, GLdouble y, GLdouble z );
	void (STDCALL *RasterPos3f)( GLfloat x, GLfloat y, GLfloat z );
	void (STDCALL *RasterPos3i)( GLint x, GLint y, GLint z );
	void (STDCALL *RasterPos3s)( GLshort x, GLshort y, GLshort z );
	void (STDCALL *RasterPos4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	void (STDCALL *RasterPos4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	void (STDCALL *RasterPos4i)( GLint x, GLint y, GLint z, GLint w );
	void (STDCALL *RasterPos4s)( GLshort x, GLshort y, GLshort z, GLshort w );
	void (STDCALL *RasterPos2dv)( const GLdouble *v );
	void (STDCALL *RasterPos2fv)( const GLfloat *v );
	void (STDCALL *RasterPos2iv)( const GLint *v );
	void (STDCALL *RasterPos2sv)( const GLshort *v );
	void (STDCALL *RasterPos3dv)( const GLdouble *v );
	void (STDCALL *RasterPos3fv)( const GLfloat *v );
	void (STDCALL *RasterPos3iv)( const GLint *v );
	void (STDCALL *RasterPos3sv)( const GLshort *v );
	void (STDCALL *RasterPos4dv)( const GLdouble *v );
	void (STDCALL *RasterPos4fv)( const GLfloat *v );
	void (STDCALL *RasterPos4iv)( const GLint *v );
	void (STDCALL *RasterPos4sv)( const GLshort *v );
	void (STDCALL *Rectd)( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
	void (STDCALL *Rectf)( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
	void (STDCALL *Recti)( GLint x1, GLint y1, GLint x2, GLint y2 );
	void (STDCALL *Rects)( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
	void (STDCALL *Rectdv)( const GLdouble *v1, const GLdouble *v2 );
	void (STDCALL *Rectfv)( const GLfloat *v1, const GLfloat *v2 );
	void (STDCALL *Rectiv)( const GLint *v1, const GLint *v2 );
	void (STDCALL *Rectsv)( const GLshort *v1, const GLshort *v2 );
	void (STDCALL *VertexPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (STDCALL *NormalPointer)( GLenum type, GLsizei stride, const GLvoid *ptr );
	void (STDCALL *ColorPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (STDCALL *IndexPointer)( GLenum type, GLsizei stride, const GLvoid *ptr );
	void (STDCALL *TexCoordPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (STDCALL *EdgeFlagPointer)( GLsizei stride, const GLvoid *ptr );
	void (STDCALL *GetPointerv)( GLenum pname, GLvoid **params );
	void (STDCALL *ArrayElement)( GLint i );
	void (STDCALL *DrawArrays)( GLenum mode, GLint first, GLsizei count );
	void (STDCALL *DrawElements)( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
	void (STDCALL *InterleavedArrays)( GLenum format, GLsizei stride, const GLvoid *pointer );
	void (STDCALL *ShadeModel)( GLenum mode );
	void (STDCALL *Lightf)( GLenum light, GLenum pname, GLfloat param );
	void (STDCALL *Lighti)( GLenum light, GLenum pname, GLint param );
	void (STDCALL *Lightfv)( GLenum light, GLenum pname, const GLfloat *params );
	void (STDCALL *Lightiv)( GLenum light, GLenum pname, const GLint *params );
	void (STDCALL *GetLightfv)( GLenum light, GLenum pname, GLfloat *params );
	void (STDCALL *GetLightiv)( GLenum light, GLenum pname, GLint *params );
	void (STDCALL *LightModelf)( GLenum pname, GLfloat param );
	void (STDCALL *LightModeli)( GLenum pname, GLint param );
	void (STDCALL *LightModelfv)( GLenum pname, const GLfloat *params );
	void (STDCALL *LightModeliv)( GLenum pname, const GLint *params );
	void (STDCALL *Materialf)( GLenum face, GLenum pname, GLfloat param );
	void (STDCALL *Materiali)( GLenum face, GLenum pname, GLint param );
	void (STDCALL *Materialfv)( GLenum face, GLenum pname, const GLfloat *params );
	void (STDCALL *Materialiv)( GLenum face, GLenum pname, const GLint *params );
	void (STDCALL *GetMaterialfv)( GLenum face, GLenum pname, GLfloat *params );
	void (STDCALL *GetMaterialiv)( GLenum face, GLenum pname, GLint *params );
	void (STDCALL *ColorMaterial)( GLenum face, GLenum mode );
	void (STDCALL *PixelZoom)( GLfloat xfactor, GLfloat yfactor );
	void (STDCALL *PixelStoref)( GLenum pname, GLfloat param );
	void (STDCALL *PixelStorei)( GLenum pname, GLint param );
	void (STDCALL *PixelTransferf)( GLenum pname, GLfloat param );
	void (STDCALL *PixelTransferi)( GLenum pname, GLint param );
	void (STDCALL *PixelMapfv)( GLenum map, GLsizei mapsize, const GLfloat *values );
	void (STDCALL *PixelMapuiv)( GLenum map, GLsizei mapsize, const GLuint *values );
	void (STDCALL *PixelMapusv)( GLenum map, GLsizei mapsize, const GLushort *values );
	void (STDCALL *GetPixelMapfv)( GLenum map, GLfloat *values );
	void (STDCALL *GetPixelMapuiv)( GLenum map, GLuint *values );
	void (STDCALL *GetPixelMapusv)( GLenum map, GLushort *values );
	void (STDCALL *Bitmap)( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
	void (STDCALL *ReadPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
	void (STDCALL *DrawPixels)( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *CopyPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
	void (STDCALL *StencilFunc)( GLenum func, GLint ref, GLuint mask );
	void (STDCALL *StencilMask)( GLuint mask );
	void (STDCALL *StencilOp)( GLenum fail, GLenum zfail, GLenum zpass );
	void (STDCALL *ClearStencil)( GLint s );
	void (STDCALL *TexGend)( GLenum coord, GLenum pname, GLdouble param );
	void (STDCALL *TexGenf)( GLenum coord, GLenum pname, GLfloat param );
	void (STDCALL *TexGeni)( GLenum coord, GLenum pname, GLint param );
	void (STDCALL *TexGendv)( GLenum coord, GLenum pname, const GLdouble *params );
	void (STDCALL *TexGenfv)( GLenum coord, GLenum pname, const GLfloat *params );
	void (STDCALL *TexGeniv)( GLenum coord, GLenum pname, const GLint *params );
	void (STDCALL *GetTexGendv)( GLenum coord, GLenum pname, GLdouble *params );
	void (STDCALL *GetTexGenfv)( GLenum coord, GLenum pname, GLfloat *params );
	void (STDCALL *GetTexGeniv)( GLenum coord, GLenum pname, GLint *params );
	void (STDCALL *TexEnvf)( GLenum target, GLenum pname, GLfloat param );
	void (STDCALL *TexEnvi)( GLenum target, GLenum pname, GLint param );
	void (STDCALL *TexEnvfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (STDCALL *TexEnviv)( GLenum target, GLenum pname, const GLint *params );
	void (STDCALL *GetTexEnvfv)( GLenum target, GLenum pname, GLfloat *params );
	void (STDCALL *GetTexEnviv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *TexParameterf)( GLenum target, GLenum pname, GLfloat param );
	void (STDCALL *TexParameteri)( GLenum target, GLenum pname, GLint param );
	void (STDCALL *TexParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (STDCALL *TexParameteriv)( GLenum target, GLenum pname, const GLint *params );
	void (STDCALL *GetTexParameterfv)( GLenum target, GLenum pname, GLfloat *params);
	void (STDCALL *GetTexParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *GetTexLevelParameterfv)( GLenum target, GLint level, GLenum pname, GLfloat *params );
	void (STDCALL *GetTexLevelParameteriv)( GLenum target, GLint level, GLenum pname, GLint *params );
	void (STDCALL *TexImage1D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *TexImage2D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *GetTexImage)( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
	void (STDCALL *GenTextures)( GLsizei n, GLuint *textures );
	void (STDCALL *DeleteTextures)( GLsizei n, const GLuint *textures);
	void (STDCALL *BindTexture)( GLenum target, GLuint texture );
	void (STDCALL *PrioritizeTextures)( GLsizei n, const GLuint *textures, const GLclampf *priorities );
	GLboolean (STDCALL *AreTexturesResident)( GLsizei n, const GLuint *textures, GLboolean *residences );
	GLboolean (STDCALL *IsTexture)( GLuint texture );
	void (STDCALL *TexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *TexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *CopyTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
	void (STDCALL *CopyTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
	void (STDCALL *CopyTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
	void (STDCALL *CopyTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	void (STDCALL *Map1d)( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
	void (STDCALL *Map1f)( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
	void (STDCALL *Map2d)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
	void (STDCALL *Map2f)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
	void (STDCALL *GetMapdv)( GLenum target, GLenum query, GLdouble *v );
	void (STDCALL *GetMapfv)( GLenum target, GLenum query, GLfloat *v );
	void (STDCALL *GetMapiv)( GLenum target, GLenum query, GLint *v );
	void (STDCALL *EvalCoord1d)( GLdouble u );
	void (STDCALL *EvalCoord1f)( GLfloat u );
	void (STDCALL *EvalCoord1dv)( const GLdouble *u );
	void (STDCALL *EvalCoord1fv)( const GLfloat *u );
	void (STDCALL *EvalCoord2d)( GLdouble u, GLdouble v );
	void (STDCALL *EvalCoord2f)( GLfloat u, GLfloat v );
	void (STDCALL *EvalCoord2dv)( const GLdouble *u );
	void (STDCALL *EvalCoord2fv)( const GLfloat *u );
	void (STDCALL *MapGrid1d)( GLint un, GLdouble u1, GLdouble u2 );
	void (STDCALL *MapGrid1f)( GLint un, GLfloat u1, GLfloat u2 );
	void (STDCALL *MapGrid2d)( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
	void (STDCALL *MapGrid2f)( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
	void (STDCALL *EvalPoint1)( GLint i );
	void (STDCALL *EvalPoint2)( GLint i, GLint j );
	void (STDCALL *EvalMesh1)( GLenum mode, GLint i1, GLint i2 );
	void (STDCALL *EvalMesh2)( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
	void (STDCALL *Fogf)( GLenum pname, GLfloat param );
	void (STDCALL *Fogi)( GLenum pname, GLint param );
	void (STDCALL *Fogfv)( GLenum pname, const GLfloat *params );
	void (STDCALL *Fogiv)( GLenum pname, const GLint *params );
	void (STDCALL *FeedbackBuffer)( GLsizei size, GLenum type, GLfloat *buffer );
	void (STDCALL *PassThrough)( GLfloat token );
	void (STDCALL *SelectBuffer)( GLsizei size, GLuint *buffer );
	void (STDCALL *InitNames)( void );
	void (STDCALL *LoadName)( GLuint name );
	void (STDCALL *PushName)( GLuint name );
	void (STDCALL *PopName)( void );
	void (STDCALL *DrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
	void (STDCALL *TexImage3D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (STDCALL *TexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	void (STDCALL *CopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	void (STDCALL *ColorTable)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
	void (STDCALL *ColorSubTable)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data );
	void (STDCALL *ColorTableParameteriv)(GLenum target, GLenum pname, const GLint *params);
	void (STDCALL *ColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
	void (STDCALL *CopyColorSubTable)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
	void (STDCALL *CopyColorTable)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	void (STDCALL *GetColorTable)( GLenum target, GLenum format, GLenum type, GLvoid *table );
	void (STDCALL *GetColorTableParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (STDCALL *GetColorTableParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *BlendEquation)( GLenum mode );
	void (STDCALL *BlendColor)( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	void (STDCALL *Histogram)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
	void (STDCALL *ResetHistogram)( GLenum target );
	void (STDCALL *GetHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
	void (STDCALL *GetHistogramParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (STDCALL *GetHistogramParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *Minmax)( GLenum target, GLenum internalformat, GLboolean sink );
	void (STDCALL *ResetMinmax)( GLenum target );
	void (STDCALL *GetMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
	void (STDCALL *GetMinmaxParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (STDCALL *GetMinmaxParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *ConvolutionFilter1D)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image );
	void (STDCALL *ConvolutionFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image );
	void (STDCALL *ConvolutionParameterf)( GLenum target, GLenum pname, GLfloat params );
	void (STDCALL *ConvolutionParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (STDCALL *ConvolutionParameteri)( GLenum target, GLenum pname, GLint params );
	void (STDCALL *ConvolutionParameteriv)( GLenum target, GLenum pname, const GLint *params );
	void (STDCALL *CopyConvolutionFilter1D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	void (STDCALL *CopyConvolutionFilter2D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (STDCALL *GetConvolutionFilter)( GLenum target, GLenum format, GLenum type, GLvoid *image );
	void (STDCALL *GetConvolutionParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (STDCALL *GetConvolutionParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (STDCALL *SeparableFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column );
	void (STDCALL *GetSeparableFilter)( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
	void (STDCALL *ActiveTexture)( GLenum texture );
	void (STDCALL *ClientActiveTexture)( GLenum texture );
	void (STDCALL *CompressedTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *CompressedTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *CompressedTexImage3D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *CompressedTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *CompressedTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *CompressedTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (STDCALL *GetCompressedTexImage)( GLenum target, GLint lod, GLvoid *img );
	void (STDCALL *MultiTexCoord1d)( GLenum target, GLdouble s );
	void (STDCALL *MultiTexCoord1dv)( GLenum target, const GLdouble *v );
	void (STDCALL *MultiTexCoord1f)( GLenum target, GLfloat s );
	void (STDCALL *MultiTexCoord1fv)( GLenum target, const GLfloat *v );
	void (STDCALL *MultiTexCoord1i)( GLenum target, GLint s );
	void (STDCALL *MultiTexCoord1iv)( GLenum target, const GLint *v );
	void (STDCALL *MultiTexCoord1s)( GLenum target, GLshort s );
	void (STDCALL *MultiTexCoord1sv)( GLenum target, const GLshort *v );
	void (STDCALL *MultiTexCoord2d)( GLenum target, GLdouble s, GLdouble t );
	void (STDCALL *MultiTexCoord2dv)( GLenum target, const GLdouble *v );
	void (STDCALL *MultiTexCoord2f)( GLenum target, GLfloat s, GLfloat t );
	void (STDCALL *MultiTexCoord2fv)( GLenum target, const GLfloat *v );
	void (STDCALL *MultiTexCoord2i)( GLenum target, GLint s, GLint t );
	void (STDCALL *MultiTexCoord2iv)( GLenum target, const GLint *v );
	void (STDCALL *MultiTexCoord2s)( GLenum target, GLshort s, GLshort t );
	void (STDCALL *MultiTexCoord2sv)( GLenum target, const GLshort *v );
	void (STDCALL *MultiTexCoord3d)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
	void (STDCALL *MultiTexCoord3dv)( GLenum target, const GLdouble *v );
	void (STDCALL *MultiTexCoord3f)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
	void (STDCALL *MultiTexCoord3fv)( GLenum target, const GLfloat *v );
	void (STDCALL *MultiTexCoord3i)( GLenum target, GLint s, GLint t, GLint r );
	void (STDCALL *MultiTexCoord3iv)( GLenum target, const GLint *v );
	void (STDCALL *MultiTexCoord3s)( GLenum target, GLshort s, GLshort t, GLshort r );
	void (STDCALL *MultiTexCoord3sv)( GLenum target, const GLshort *v );
	void (STDCALL *MultiTexCoord4d)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	void (STDCALL *MultiTexCoord4dv)( GLenum target, const GLdouble *v );
	void (STDCALL *MultiTexCoord4f)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	void (STDCALL *MultiTexCoord4fv)( GLenum target, const GLfloat *v );
	void (STDCALL *MultiTexCoord4i)( GLenum target, GLint s, GLint t, GLint r, GLint q );
	void (STDCALL *MultiTexCoord4iv)( GLenum target, const GLint *v );
	void (STDCALL *MultiTexCoord4s)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
	void (STDCALL *MultiTexCoord4sv)( GLenum target, const GLshort *v );
	void (STDCALL *LoadTransposeMatrixd)( const GLdouble m[16] );
	void (STDCALL *LoadTransposeMatrixf)( const GLfloat m[16] );
	void (STDCALL *MultTransposeMatrixd)( const GLdouble m[16] );
	void (STDCALL *MultTransposeMatrixf)( const GLfloat m[16] );
	void (STDCALL *SampleCoverage)( GLclampf value, GLboolean invert );
	void (STDCALL *ActiveTextureARB)(GLenum texture);
	void (STDCALL *ClientActiveTextureARB)(GLenum texture);
	void (STDCALL *MultiTexCoord1dARB)(GLenum target, GLdouble s);
	void (STDCALL *MultiTexCoord1dvARB)(GLenum target, const GLdouble *v);
	void (STDCALL *MultiTexCoord1fARB)(GLenum target, GLfloat s);
	void (STDCALL *MultiTexCoord1fvARB)(GLenum target, const GLfloat *v);
	void (STDCALL *MultiTexCoord1iARB)(GLenum target, GLint s);
	void (STDCALL *MultiTexCoord1ivARB)(GLenum target, const GLint *v);
	void (STDCALL *MultiTexCoord1sARB)(GLenum target, GLshort s);
	void (STDCALL *MultiTexCoord1svARB)(GLenum target, const GLshort *v);
	void (STDCALL *MultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t);
	void (STDCALL *MultiTexCoord2dvARB)(GLenum target, const GLdouble *v);
	void (STDCALL *MultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t);
	void (STDCALL *MultiTexCoord2fvARB)(GLenum target, const GLfloat *v);
	void (STDCALL *MultiTexCoord2iARB)(GLenum target, GLint s, GLint t);
	void (STDCALL *MultiTexCoord2ivARB)(GLenum target, const GLint *v);
	void (STDCALL *MultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t);
	void (STDCALL *MultiTexCoord2svARB)(GLenum target, const GLshort *v);
	void (STDCALL *MultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (STDCALL *MultiTexCoord3dvARB)(GLenum target, const GLdouble *v);
	void (STDCALL *MultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (STDCALL *MultiTexCoord3fvARB)(GLenum target, const GLfloat *v);
	void (STDCALL *MultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r);
	void (STDCALL *MultiTexCoord3ivARB)(GLenum target, const GLint *v);
	void (STDCALL *MultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (STDCALL *MultiTexCoord3svARB)(GLenum target, const GLshort *v);
	void (STDCALL *MultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (STDCALL *MultiTexCoord4dvARB)(GLenum target, const GLdouble *v);
	void (STDCALL *MultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (STDCALL *MultiTexCoord4fvARB)(GLenum target, const GLfloat *v);
	void (STDCALL *MultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (STDCALL *MultiTexCoord4ivARB)(GLenum target, const GLint *v);
	void (STDCALL *MultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (STDCALL *MultiTexCoord4svARB)(GLenum target, const GLshort *v);
	GLhandleARB (STDCALL *CreateDebugObjectMESA)(void);
	void (STDCALL *ClearDebugLogMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType);
	void (STDCALL *GetDebugLogMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType, GLsizei maxLength, GLsizei *length, GLcharARB *debugLog);
	GLsizei (STDCALL *GetDebugLogLengthMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType);
	void (STDCALL *ProgramCallbackMESA)(GLenum target, GLprogramcallbackMESA callback, GLvoid *data);
	void (STDCALL *GetProgramRegisterfvMESA)(GLenum target, GLsizei len, const GLubyte *name, GLfloat *v);
	void (STDCALL *BlendEquationSeparateATI)( GLenum modeRGB, GLenum modeA );
/* Functions generated: 461 */
